!function(){"use strict";class e{constructor(e,t,i,o,s,n){var r,a;a=()=>{this._owner_id!==this._userID&&this._trashButton.classList.add("element__trash-button_hidden")},(r="_checkIfTrashIconAllowed")in this?Object.defineProperty(this,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[r]=a,this._card=e,this._name=e.name,this._link=e.link,this._likes=e.likes,this._id=e._id,this._owner=e.owner,this._owner_id=e.owner._id,this._cardSelector=t,this._handleCardClick=i,this._handleLikeClick=o,this._handleDeleteIconClick=s,this._userID=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)})),this._favoriteButton.addEventListener("click",(e=>{this._handleLikeClick(this._card,this._checkIfLiked()).then((e=>{this.updateLikes(e.likes)}))})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteIconClick(this)}))}removeCard(){this._element.remove(),this._element=null}getID(){return this._id}updateLikes(e){this._likes=e,this._renderLikes()}_checkIfLiked(){return this._likes.some((e=>e._id===this._userID))}_renderLikes(){this._checkIfLiked()?this._favoriteButton.classList.add("element__favorite-button_active"):this._favoriteButton.classList.remove("element__favorite-button_active"),this._likesCounter.textContent=this._likes.length}generateCard(){this._element=this._getTemplate(),this._favoriteButton=this._element.querySelector("#favorite-button"),this._trashButton=this._element.querySelector(".element__trash-button"),this._likesCounter=this._element.querySelector(".element__likes-counter"),this._renderLikes(),this._checkIfTrashIconAllowed(),this._setEventListeners(),this._elementTitle=this._element.querySelector(".element__title"),this._elementTitle.textContent=this._name;const e=this._element.querySelector(".element__image");return e.alt="Photo of ".concat(this._name),e.src=this._link,this._element}}class t{constructor(e,t){let{items:i,renderer:o}=e;this._items=i,this._renderer=o,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}function i(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class o{constructor(e){i(this,"closePopupOnRemoteClick",(e=>{e.target===e.currentTarget&&this.close()})),i(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("modal_opened"),this._popup.addEventListener("mousedown",this.closePopupOnRemoteClick),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),this._popup.removeEventListener("mousedown",this.closePopupOnRemoteClick),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()}))}}class s extends o{constructor(e,t,i){super(e),this._popupForm=this._popup.querySelector(".modal__form"),this._inputList=Array.from(this._popupForm.querySelectorAll(".form__input")),this._submitButton=this._popup.querySelector(".form__submit-button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=i,this._callback=t}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._callback(this._getInputValues())}))}close(){super.close(),setTimeout((()=>{this._popupForm.reset()}),500)}}function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class r{constructor(e,t){n(this,"_showInputError",((e,t)=>{t.textContent=e.validationMessage,t.classList.add(this._validationConfig.activeInputErrorClass),e.validity.valid||1!=e.value.length||e.validity.typeMismatch?e.validity.valid||(t.classList.add(this._validationConfig.errorClassSingleLine),e.classList.add(this._validationConfig.inputErrorClass)):(t.classList.add(this._validationConfig.errorClassDoubleLine),e.classList.add(this._validationConfig.inputErrorClass))})),n(this,"_hideInputError",((e,t)=>{e.classList.remove(this._validationConfig.inputErrorClass),t.classList.remove(this._validationConfig.activeInputErrorClass),t.classList.remove(this._validationConfig.errorClassSingleLine),t.classList.remove(this._validationConfig.errorClassDoubleLine)})),n(this,"_toggleInputError",((e,t)=>{this._hasInvalidInput?this._showInputError(e,t):this._hideInputError(e,t)})),n(this,"toggleButtonState",(()=>{this._hasInvalidInput()?(this._buttonElement.classList.add(this._validationConfig.inactiveButtonClass),this._buttonElement.setAttribute("disabled","true")):(this._buttonElement.classList.remove(this._validationConfig.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))})),n(this,"_setEventListeners",(()=>{this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{const t=this._form.querySelector("#".concat(e.id,"-input-error"));this._hideInputError(e,t),this._toggleInputError(e,t),this.toggleButtonState()}))}))})),n(this,"_hasInvalidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),this._validationConfig=e,this._form=t,this._buttonElement=this._form.querySelector(this._validationConfig.submitButtonSelector),this._inputList=Array.from(this._form.querySelectorAll(this._validationConfig.inputSelector))}resetValidation(){this._inputList.forEach((e=>{const t=this._form.querySelector("#".concat(e.id,"-input-error"));this._hideInputError(e,t)}))}enableValidation(){this._setEventListeners()}}document.querySelector(".modal_type_profile");const a=document.querySelector("#edit-button"),l=(document.querySelector(".modal__close-button_type_profile"),document.querySelector(".profile__info-name-text"),document.querySelector(".profile__info-bio"),document.querySelector("#name"),document.querySelector("#about-me"),document.querySelector(".modal__form_type_profile")),c=(document.querySelector(".modal_type_card"),document.querySelector(".modal__close-button_type_card"),document.querySelector(".modal__form_type_card")),u=(document.querySelector("#title"),document.querySelector("#image-link"),document.querySelector(".profile__add-button")),_=(document.querySelector(".elements"),document.querySelector(".modal_type_image")),h=(document.querySelector(".modal__image"),document.querySelector(".modal__title_type_image"),_.querySelector("#image-close"),document.querySelector(".profile__avatar"),document.querySelector(".profile__edit-image"),document.querySelector(".modal__form_type_profile-image")),d=document.querySelector(".profile__overlay"),m=document.querySelector(".profile__edit-image"),p={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",activeInputErrorClass:"form__input-error_active",inputErrorClass:"form__input_type_error",errorClassSingleLine:"form__input-error_type_single-line",errorClassDoubleLine:"form__input-error_type_double-line"},f=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_handleServerResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}getWebpageInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getUserInfo(){return fetch("".concat(this._url,"/users/me"),{method:"GET",headers:this._headers}).then(this._handleServerResponse)}getInitialCards(){return fetch("".concat(this._url,"/cards"),{headers:this._headers}).then((e=>this._handleServerResponse(e)))}editProfileInfo(e){return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>this._handleServerResponse(e)))}addNewCard(e){return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>this._handleServerResponse(e)))}editProfileImage(e){return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>this._handleServerResponse(e)))}deleteCard(e){return fetch("".concat(this._url,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>this._handleServerResponse(e)))}changeLikeCardStatus(e,t){return fetch("".concat(this._url,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>this._handleServerResponse(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"655a1e50-e6e9-4121-944b-aac1807b3df3","Content-Type":"application/json"}}),v=new s(".modal_type_profile",(function(e){v.showLoading(),f.editProfileInfo(e).then((e=>{L.setUserInfo(e),v.close()})).catch((e=>{console.log(e)})).finally((()=>{v.hideLoading()}))}),"Saving..."),g=new s(".modal_type_card",(function(e){g.showLoading(),f.addNewCard(e).then((e=>{C.addItem(e),g.close()})).catch((e=>{console.log(e)})).finally((()=>{g.hideLoading()}))}),"Creating..."),y=new class extends o{constructor(e){super(e),this._imageModalTitle=this._popup.querySelector(".modal__title_type_image"),this._imageModalImage=this._popup.querySelector(".modal__image")}open(e,t){super.open(),this._imageModalImage.src=t,this._imageModalImage.alt="Photo of ".concat(e),this._imageModalTitle.textContent=e}}(".modal_type_image"),b=new class extends o{constructor(e,t){super(),this._popup=document.querySelector(e),this._submitButton=this._popup.querySelector("#verify-save"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=t}addSubmitAction(e){this._handleSubmitCallback=e}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}setEventListeners(){super.setEventListeners(),this._submitButton.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmitCallback()}))}}(".modal_type_verify","Removing..."),S=new s(".modal_type_profile-image",(function(e){S.showLoading(),f.editProfileImage(e.link).then((e=>{console.log(e),L.setAvatar(e),S.close()})).catch((e=>{console.log(e)})).finally((()=>{S.hideLoading()}))}),"Saving..."),L=new class{constructor(e){this._profileName=document.querySelector(e.name),this._profileBio=document.querySelector(e.about),this._profileAvatar=document.querySelector(e.avatar)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileBio.textContent}}getAvatar(){return{link:this._profileAvatar.src}}setUserInfo(e){this._profileName.textContent=e.name,this._profileBio.textContent=e.about}setAvatar(e){this._profileAvatar.src=e.avatar}}({name:".profile__info-name-text",about:".profile__info-bio",avatar:".profile__avatar"});let C;f.getWebpageInfo().then((i=>{let[o,s]=i;L.setUserInfo(s),L.setAvatar(s),C=new t({items:o,renderer:t=>function(t,i){return new e(t,"#element-template",E,q,w,i).generateCard()}(t,s._id)},".elements"),C.renderItems()})).catch((e=>{console.log(e)}));const E=(e,t)=>{y.open(e,t)};function k(){const e=L.getAvatar();S.setInputValues(e),T.resetValidation(),T.toggleButtonState(),S.open()}const I=e=>{const t=new r(p,e);return t.enableValidation(),t};function q(e,t){return f.changeLikeCardStatus(e._id,t).catch((e=>{console.log(e)}))}function w(e){b.open(),b.addSubmitAction((()=>{b.showLoading(),f.deleteCard(e.getID()).then((()=>{e.removeCard(),b.close()})).catch((e=>{console.log(e)})).finally((()=>{b.hideLoading()}))})),b.setEventListeners()}a.addEventListener("click",(function(){const e=L.getUserInfo();v.setInputValues(e),x.resetValidation(),x.toggleButtonState(),v.open()})),u.addEventListener("click",(function(){B.resetValidation(),B.toggleButtonState(),g.open()})),d.addEventListener("click",(function(){k()})),m.addEventListener("click",(function(){k()})),v.setEventListeners(),g.setEventListeners(),y.setEventListeners(),S.setEventListeners();const B=I(c),x=I(l),T=I(h)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,