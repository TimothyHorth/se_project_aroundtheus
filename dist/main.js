!function(){"use strict";class e{constructor(e,t,o){var i,n;n=()=>{this._element.remove(),this._element=null},(i="_remove")in this?Object.defineProperty(this,i,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[i]=n,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=o}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".element__image").addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)})),this._element.querySelector(".element__favorite-button").addEventListener("click",(e=>{e.target.classList.toggle("element__favorite-button_active")})),this._element.querySelector(".element__trash-button").addEventListener("click",this._remove)}generateCard(){this._element=this._getTemplate(),this._setEventListeners(),this._element.querySelector(".element__title").textContent=this._name;const e=this._element.querySelector(".element__image");return e.alt="Photo of ".concat(this._name),e.src=this._link,this._element}}function t(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class o{constructor(e){t(this,"closePopupOnRemoteClick",(e=>{e.target===e.currentTarget&&this.close()})),t(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),this._popup=document.querySelector(e)}open(){this._popup.classList.add("modal_opened"),this._popup.addEventListener("mousedown",this.closePopupOnRemoteClick),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),this._popup.removeEventListener("mousedown",this.closePopupOnRemoteClick),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()}))}}class i extends o{constructor(e,t){super(e),this._popupForm=this._popup.querySelector(".modal__form"),this._inputList=Array.from(this._popupForm.querySelectorAll(".form__input")),this._callback=t}getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._callback()}))}close(){super.close(),setTimeout((()=>{this._popupForm.reset()}),500)}}function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}class s{constructor(e,t){n(this,"_showInputError",((e,t)=>{t.textContent=e.validationMessage,t.classList.add(this._validationConfig.activeInputErrorClass),e.validity.valid||1!=e.value.length||e.validity.typeMismatch?e.validity.valid||(t.classList.add(this._validationConfig.errorClassSingleLine),e.classList.add(this._validationConfig.inputErrorClass)):(t.classList.add(this._validationConfig.errorClassDoubleLine),e.classList.add(this._validationConfig.inputErrorClass))})),n(this,"_hideInputError",((e,t)=>{e.classList.remove(this._validationConfig.inputErrorClass),t.classList.remove(this._validationConfig.activeInputErrorClass),t.classList.remove(this._validationConfig.errorClassSingleLine),t.classList.remove(this._validationConfig.errorClassDoubleLine)})),n(this,"_toggleInputError",((e,t)=>{this._hasInvalidInput?this._showInputError(e,t):this._hideInputError(e,t)})),n(this,"toggleButtonState",(()=>{this._hasInvalidInput()?(this._buttonElement.classList.add(this._validationConfig.inactiveButtonClass),this._buttonElement.setAttribute("disabled","true")):(this._buttonElement.classList.remove(this._validationConfig.inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))})),n(this,"_setEventListeners",(()=>{this.toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{const t=this._form.querySelector("#".concat(e.id,"-input-error"));this._hideInputError(e,t),this._toggleInputError(e,t),this.toggleButtonState()}))}))})),n(this,"_hasInvalidInput",(()=>this._inputList.some((e=>!e.validity.valid)))),this._validationConfig=e,this._form=t,this._buttonElement=this._form.querySelector(this._validationConfig.submitButtonSelector),this._inputList=Array.from(this._form.querySelectorAll(this._validationConfig.inputSelector))}resetValidation(){this._inputList.forEach((e=>{const t=this._form.querySelector("#".concat(e.id,"-input-error"));this._hideInputError(e,t)}))}enableValidation(){this._setEventListeners()}}document.querySelector(".modal_type_profile");const r=document.querySelector("#edit-button"),l=(document.querySelector(".modal__close-button_type_profile"),document.querySelector(".profile__info-name-text"),document.querySelector(".profile__info-bio"),document.querySelector("#name"),document.querySelector("#about-me"),document.querySelector(".modal__form_type_profile"),document.querySelector(".modal_type_card"),document.querySelector(".modal__close-button_type_card"),document.querySelector(".modal__form_type_card"),document.querySelector("#title"),document.querySelector("#image-link"),document.querySelector(".profile__add-button")),a=(document.querySelector(".elements"),document.querySelector(".modal_type_image"));document.querySelector(".modal__image"),document.querySelector(".modal__title_type_image"),a.querySelector("#image-close");const c=new class{constructor(e,t){let{items:o,renderer:i}=e;this._items=o,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:t=>function(t){return new e(t,"#element-template",p).generateCard()}(t)},".elements"),u=new i(".modal_type_profile",(function(){const e=u.getInputValues();m.setUserInfo(e),u.close()})),_=new i(".modal_type_card",(function(){const e=this.getInputValues();c.addItem(e),_.close()})),d=new class extends o{constructor(e){super(e),this._imageModalTitle=this._popup.querySelector(".modal__title_type_image"),this._imageModalImage=this._popup.querySelector(".modal__image")}open(e,t){super.open(),this._imageModalImage.src=t,this._imageModalImage.alt="Photo of ".concat(e),this._imageModalTitle.textContent=e}}(".modal_type_image");u.setEventListeners(),_.setEventListeners(),d.setEventListeners();const m=new class{constructor(e){this._nameSelector=e.name,this._bioSelector=e.bio,this._profileName=document.querySelector(this._nameSelector),this._profileBio=document.querySelector(this._bioSelector)}getUserInfo(){return{name:this._profileName.textContent,aboutme:this._profileBio.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._profileBio.textContent=e.aboutme}}({name:".profile__info-name-text",bio:".profile__info-bio"}),p=(e,t)=>{d.open(e,t)};r.addEventListener("click",(function(){const e=m.getUserInfo();u.setInputValues(e),h["edit profile"].resetValidation(),h["edit profile"].toggleButtonState(),u.open()})),l.addEventListener("click",(function(){h["edit card"].resetValidation(),h["edit card"].toggleButtonState(),_.open()}));const h={};var f;f={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",activeInputErrorClass:"form__input-error_active",inputErrorClass:"form__input_type_error",errorClassSingleLine:"form__input-error_type_single-line",errorClassDoubleLine:"form__input-error_type_double-line"},Array.from(document.querySelectorAll(f.formSelector)).forEach((e=>{const t=new s(f,e),o=e.getAttribute("name");h[o]=t,t.enableValidation()})),c.renderItems()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,